# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.

include:
  - project: olp/onesearch/infrastructure/gitlabci-utils
    file: variables_from_vault.yml
    ref: master

image:
  name: python:latest
  #entrypoint: ['bash', '-c', 'useradd $HERE_USER_ID && exec su $HERE_USER_ID -c bash']

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

stages:          # List of stages for jobs, and their order of execution
  - build
  - run

build:
  stage: build  
  script:
    - ls -lR
    - pip install jupyter-repo2docker
    - jupyter-repo2docker \
     --no-run --image-name search-demo-repo2docker --user-name default \
     ssh://git@main.gitlab.in.here.com:3389/olp/onesearch/playground/decitre/search-notebook.git
    - docker save search-demo-repo2docker:latest | gzip > search-demo-repo2docker.tgz
  artifacts:
    paths:
      - search-demo-repo2docker.tgz


#docker-build:
  # Use the official docker image.
#  image: docker:latest
#  stage: build2
#  services:
#    - docker:dind
#  before_script:
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
#  script:
#    - |
#      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#        tag=""
#        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
#      else
#        tag=":$CI_COMMIT_REF_SLUG"
#        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
#      fi
#    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
#    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
#  rules:
#    - if: $CI_COMMIT_BRANCH
#      exists:
#        - Dockerfile
