# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements/test.txt

      - name: Test
        run: |
          pytest -v --cov=src tests --cov-report=xml --cov-report=term-missing

      - name: Upload to Codecov
        if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  pages-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install the dependencies
        run: |
          src/here_search/demo/scripts/lite-run.sh -n || true
          ls -la
          ls -la workspace
          mv workspace/public .
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./public

  deploy:
    needs: pages-build
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  docs:
    needs: pages-build
    runs-on: ubuntu-latest
    env:
      DOCS_IN_CI: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download (dist)
        uses: actions/download-artifact@v3
        with:
          name: jupyterlite dist ${{ github.run_number }}
          path: ./dist
      - name: Download (typedoc)
        uses: actions/download-artifact@v3
        with:
          name: jupyterlite typedoc ${{ github.run_number }}
          path: ./docs/reference/api/ts
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - name: Cache (pip)
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-docs-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-docs-
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-
      - name: Cache (docs extensions)
        uses: actions/cache@v3
        with:
          path: ./examples/.cache
          key: |
            ${{ env.CACHE_EPOCH }}-docs-app-${{ hashFiles('examples/*.json') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-docs-app-
      - name: Setup pip (docs)
        run: python3 -m pip install -r requirements/docs.txt
      - name: Install (py)
        run: doit dev:py:jupyterlite-core
      - name: Build the JavaScript kernel
        run: |
          yarn --frozen-lockfile
          yarn run build:js-kernel
      - name: Docs (app)
        run: doit docs:app:build
      - name: Docs (app archive)
        run: doit docs:app:pack
      - name: Upload (docs app archive)
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlite docs archive ${{ github.run_number }}
          path: |
            build/docs-app/jupyterlite-docs-*.tgz
      - name: Docs (sphinx)
        run: doit docs:sphinx
      - name: Check Built Artifacts
        run: doit check
      - name: Test (py)
        run: doit test:py:jupyterlite-core
      - name: Upload (reports)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: |
            jupyterlite reports ${{ github.run_number }} ${{ matrix.os }} ${{ matrix.python-version }}
          path: |
            build/htmlcov
            build/pytest
      - name: Upload (sphinx logs)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jupyterlite sphinx logs ${{ github.run_number }}
          if-no-files-found: ignore
          path: /tmp/sphinx-*.log